p <- 1.0
i <- 4
for(j in 1:(i-1)){
if(runif(1) <= p){
A[i, j] <- 1
}
}
A
t(A)
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
p <- 1.0
i <- 4
for(j in 1:(i-1)){
if(runif(1) <= p){
A[i, j] <- 1
}
}
A
t(A)
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
p <- 1.0
i <- 4
for(j in 1:(i-1)){
if(runif(1) <= p){
A[i, j] <- 1
}
}
A
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
p <- 1.0
i <- 4
for(j in 1:(i-1)){
if(runif(1) <= p){
A[i, j] <- 1
}
}
A
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
p <- 1.0
i <- 4
for(j in 1:(i-1)){
if(runif(1) <= p){
A[i, j] <- 1
}
}
A
as.integer(runif(i-1))
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
p <- 1.0
i <- 4
for(j in 1:(i-1)){
if(runif(1) <= p){
A[i, j] <- 1
}
}
A
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
for(i in 2:n){
for(j in 1:(i-1)){
print(c(i,j))
if(i != j){
if(runif(1) <= p){
A[i, j] <- 1
}
}
}
}
A <- A + t(A)
A
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
for(i in 2:n){
A[i, 1:(i-1)] <- as.integer(runif(i-1)) <= p
}
A <- A + t(A)
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
for(i in 2:n){
A[i, 1:(i-1)] <- as.integer(runif(i-1)) <= p
}
A <- A + t(A)
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
for(i in 2:n){
A[i, 1:(i-1)] <- as.integer(runif(i-1)) <= p
}
A <- A + t(A)
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
for(i in 2:n){
A[i, 1:(i-1)] <- as.integer(runif(i-1)) <= p
}
A <- A + t(A)
?sample
# Sample
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
# ?sample
sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, prob=c(1-p, p))
sample(c(0, 1),size=as.integer(n*(n-1)/2), replace=T, prob=c(1-p, p))
sample(c(0, 1),size=as.integer(n*(n-1)/2), replace = TRUE, prob=c(1-p, p))
A[lower.tri(A)] <- sample(c(0, 1),size=as.integer(n*(n-1)/2),
replace = TRUE, prob=c(1-p, p))
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
# ?sample
# sample(c(0, 1),size=as.integer(n*(n-1)/2), replace = TRUE, prob=c(1-p, p))
A[lower.tri(A)] <- sample(c(0, 1),size=as.integer(n*(n-1)/2),
replace = TRUE, prob=c(1-p, p))
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
# ?sample
# sample(c(0, 1),size=as.integer(n*(n-1)/2), replace = TRUE, prob=c(1-p, p))
A[lower.tri(A)] <- sample(c(0, 1),size=as.integer(n*(n-1)/2),
replace = TRUE, prob=c(1-p, p))
A[lower.tri(A)]
read.csv(C:\Users\Laura\Documents\GitHub\RepoLauraProgramming\Session7\Data\output)
getwd
setwd(dir = '~/GitHub/RepoLauraProgramming/Session7')
getwd()
data_911 = read.csv('911.csv', header = TRUE, sep = ",", quote = "\"", dec = ".", fill = TRUE, comment.char = "")
getwd()
summary(data_911)
numcalls <- data_911['title', 'timestamp']
numcalls
numcalls <- data_911['title', 'timeStamp']
numcalls
subset(data_911, select=c("title", "timeStamp"))
numcalls <- subset(data_911, select=c("title", "timeStamp"))
index(numcalls) <- strptime(index(dataset),"%Y-%m-%d")
index(numcalls) <- strptime(index(data_911),"%Y-%m-%d")
index(numcalls) <- strptime(numcalls),"%Y-%m-%d")
install.packages("lubridate")
class(data_911(timestamp))
colnames(data_911)
typeof("timeStamp")
str(data_911)
typeof(timeStamp)
colnames(data_911)
colnames(data_911[timeStamp])
colnames(data_911[1])
colnames(data_911[2])
typeof(data_911[2])
typeof(data_911["lng"])
typeof(data_911["timeStamp"])
head(data_911[['twp']])
head(data_911)
typeof(data_911["timeStamp"])
class(data_911["timeStamp"])
class(data_911["lng"])
library(lubridate)
data_911[6]
asdate(data_911[6])
as.Date(data_911[6])
data_911[a]
data_911[1,]
as.Date(data_911[1,6])
as.Date(data_911[,6])
library(data.table)
install.packages("data.table")
library(data.table)
t
dt <- as.data.table((data_911[,6]))
dt <- as.data.table(data_911)
dt[,days:=format([,6],"%d.%m.%Y")]
dt[,days:=format([6],"%d.%m.%Y")]
dt[days:=format([6],"%d.%m.%Y")]
dt
dt <- as.data.table(data_911[,6])
dt
numcol(dt)
colnames(dt)
Dates <- dt[1]
Dates
Dates <- dt[,1]
Dates
Dates <- dt[,2]
Dates
Dates <- dt["v1"]
Dates <- as.Date(data_911[,6])
Dates
data_911[order(as.Date(d$[,6], format="%d/%m/%Y")),]
data_911[order(as.Date([,6], format="%d/%m/%Y")),]
data_911[order(as.Date(Data_911[,6,], format="%d/%m/%Y")),]
data_911[order(as.Date(Data_911, format="%d/%m/%Y")),]
d <- as.Date(data_911[,6])
d
data_911[order(data_911[,6])]
data_911[,6]
data_911[order(data_911$timeStamp)]
timeStamp
timeStamp
data_911[order(data_911$data_911[,6])]
d[order(d$d)]
d[order(d)]
data_911[order(d)]
d[order(data_911)]
data_911[order(d)]
dd <- as.Date(data_911[,6])
d <- data_911[,6]
d
data_911[order(d)]
data_911[order(data_911$d)]
#install.packages("lubridate")
data_911[order(data_911$dd)]
d[order(data_911)]
dd[order(data_911)]
typeof(data_911)
class(data_911)
mode(data_911)
typeof(data_911)
class(data_911[6])
typeof(data_911[6])
mode(data_911[6])
typeof(dd)
class(dd)
(data_911[,6])
mode(dd)
typeof(dd)
class(dd)
mode(dd)
summary(data_911)
numcalls <- subset(data_911, select=c("title", "timeStamp"))
numcalls
colnames(numcalls)
table(numcalls$timeStamp)
head(data_911)
head(numcalls)
str(numcalls)
length(numcalls)
length(numcalls$title)
length(numcalls$timeStamp)
cbind(numcalls, dd)
colnames(newt)
newt <- cbind(numcalls, dd)
colnames(newt)
newt$timeStamp <- NULL
colnames(newt)
newt
tapply(newt$title, as.Date(newt$dd, format="%m/%d/%Y"), sum)
split(newt, as.Date(newt$dd, format="%m/%d/%Y"))
newt <- newt(dd = seq.dd, by="day")
as.data.frame(table(unique(newt)$dd))
names(newt)[names(newt)=="Var1"] <- "date"
newt
countt <- as.data.frame(table(unique(newt)$dd)) # wow this does what I've been looking for for a while!!!
countt
names(countt)[names(newt)=="Var1"] <- "date"
countt
colnames(countt)
names(countt)[names(newt)=="Var1"] <- "date"
colnames(countt)
names(countt)[names(countt)=="Var1"] <- "date"
countt
summary(countt)
length(countt)
length(countt$date)
library(ggplot2)
?plot.ggplot
plot(x = countt$date, y = countt$Freq)
plot.ggplot(x = countt$date, y = countt$Freq)
max_y <- max(countt$Freq)
plot(x = countt$date, y = countt$Freq)
plot(x = countt$date, y = countt$Freq, type = "o", col="red")
plot(x = countt$date, y = countt$Freq, type = "o", col="red")
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
library(dplyr)
countt %>%
mutate(month = format(date, "%m"), year = format(date, "%Y")) %>%
group_by(month, year) %>%
summarise(total = sum(value))
typeof(countt$date)
class(countt$date)
as.date(countt$date)
date()
sys.date()
today <- Sys.Date()
format(today, format="%B %d %Y")
countt %>%
mutate(month = format(date, "%m"), year = format(date, "%Y")) %>%
countt %>%
mutate(month = format(date, "%m"), year = format(date, "%Y")) %>%
group_by(month, year) %>%
countt %>%
mutate(month = format(date, "%m"), year = format(date, "%Y")) %>%
group_by(month, year) %>%
summarise(total = sum(value))
summarise(total = sum(countt$Freq))
countt %>%
mutate(month = format(date, "%m"), year = format(date, "%Y")) %>%
group_by(month, year) %>%
summarise(total = sum(Freq))
mutate(countt(month = format(date, "%m"), year = format(date, "%Y"))
mutate(month = format(date, "%m"), year = format(date, "%Y"))
mutate(month = format(date, "%m"), year = format(date, "%Y"))
strDates <- c(countt$date)
dates <- as.Date(strDates, "%m/%d/%Y")
dates <- as.Date(strDates, "%m")
as.Date(countt$date)
as.Date(countt$date, format = "%b %d %Y")
countt$date <- as.Date(countt$date)
countt$date <- format.Date(countt$date, "%b %d %Y")
countt$date
countt$date <- format.Date(countt$date, "%B")
%d %Y
countt$date <- format.Date(countt$date, "%d %b")
countt$date <- format.Date(countt$date, "%d %b %y")
countt$date <- format.Date(countt$date, "%d %B %Y")
countt$date <- format.Date(countt$date, "%b %d %Y")
countt$date
countt$date <- as.Date(countt$date)
summary(countt)
numcalls <- subset(data_911, select=c("title", "timeStamp"))
table(numcalls$timeStamp)
newt <- cbind(numcalls, dd)
newt <- cbind(numcalls, dd)
newt$timeStamp <- NULL
colnames(newt)
split(newt, as.Date(newt$dd, format="%m/%d/%Y"))
countt <- as.data.frame(table(unique(newt)$dd)) # wow this does what I've been looking for for a while!!!
colnames(countt)
names(countt)[names(countt)=="Var1"] <- "date"
summary(countt)
countt$date <- as.Date(countt$date)
countt$date
countt$date <- as.Date(countt$date, format = "%m")
countt$date
Year <- format(as.Date(countt$date, "%d/%m/%Y"), "%Y")
Year
Year <- format(as.Date(countt$date, "%d/%m/%Y"), "%m")
Month <- format(as.Date(countt$date, "%d/%m/%Y"), "%m")
Month
Month <- format(as.Date(countt$date, "%d/%m/%Y"), "%m")
Month
Month <- format(as.Date(countt$date, "%d/%m/%Y"), "%m")
Month
cbind(countt, Month)
Month <- format(as.Date(countt$date, "%d/%m/%Y"), "%m%Y")
Month
Month <- format(as.Date(countt$date, "%d/%m/%Y"), "%m %Y")
Month
cbind(countt, Month)
Month <- format(as.Date(countt$date, "%d/%m/%Y"), "%m-%Y")
Month
cbind(countt, Month)
countt <- cbind(countt, Month)
plot(x = countt$Month, y = countt$Freq)
plot(x = countt$Month, y = countt$Freq, col = "blue")
plot(x = countt$Month, y = countt$Freq, col = "pink")
barplot(x = countt$Month, y = countt$Freq, col = "pink")
barplot(x = countt$Month, y = countt$Freq)
barplot(countt$Month)
barplot(countt)
barplot(countt$Freq)
barplot(countt$Freq, xlab = countt$Month)
barplot(countt$Freq, x = countt$Month)
plot(x = countt$Month, y = countt$Freq, col = "pink", main = "pwetty graph")
plot(x = countt$Month, y = countt$Freq, col = "pink", main = "Pwetty Pink Gwaph")
plot(x = countt$Month, y = countt$Freq, col = "pink", main = "My Pwetty Pink Gwaph")
summary(countt)
plot(x = countt$date, y = countt$Freq, type = "o", col="red")
plot(x = countt$Month, y = countt$Freq, type = "o", col="red")
plot(x = countt$Month, y = countt$Freq, col = "pink", main = "My Pwetty Pink Gwaph")
write.csv(file=HW7.csv, x=countt)
write.csv(file=HW7.csv, x=countt, row.names = F)
write.csv(file=HW, x=countt, row.names = F)
write.csv(file="/GitHub/RepoLauraProgramming/Session7/HW7", x=countt, row.names = F)
getwd()
getwd()
mydir <- "/GitHub/RepoLauraProgramming/Session7/"
setwd(dir = '~/GitHub/RepoLauraProgramming/Session7')
data_911 = read.csv('911.csv', header = TRUE, sep = ",", quote = "\"", dec = ".", fill = TRUE, comment.char = "")
numcalls <- subset(data_911, select=c("title", "timeStamp"))
d <- data_911[,6]
dd <- as.Date(data_911[,6])
dd[order(data_911)]
numcalls <- subset(data_911, select=c("title", "timeStamp"))
newt <- cbind(numcalls, dd)
newt <- cbind(numcalls, dd)
newt$timeStamp <- NULL
colnames(newt)
countt <- as.data.frame(table(unique(newt)$dd)) # wow this does what I've been looking for for a while!!!
names(countt)[names(countt)=="Var1"] <- "date"
countt
countt$date <- as.Date(countt$date)
countt$date
Month <- format(as.Date(countt$date, "%d/%m/%Y"), "%m-%Y")
Month
countt <- cbind(countt, Month)
plot(x = countt$Month, y = countt$Freq, col = "pink", main = "My Pwetty Pink Gwaph")
write.csv(file="/GitHub/RepoLauraProgramming/Session7/HW7", x=countt, row.names = F)
write.csv(file="HW7", x=countt, row.names = F)
write.csv(file="HW7.csv", x=countt, row.names = F)
plot(x = countt$Month, y = countt$Freq, col = "pink", main = "My Pwetty Pink Graph")
plot(x = countt$Month, y = countt$Freq, col = "pink", main = "Pwetty Pink Graph")
head(data_911[['twp']])
class(data_911["lng"])
typeof(data_911["lng"])
head(data_911["lng"])
str(data_911)
str(data_911["lng"])
summary(data_911)
colnames(data_911)
table(numcalls$timeStamp)
summary(countt)
countt
Month
countt <- cbind(countt, Month)
countt
counttM <- as.data.frame(table(unique(countt)$Month))
counttM
counttM <- aggregate(countt[countt$Freq],by=list(countt$Month), "sum")
counttM <- aggregate([countt$Freq],by=list(countt$Month), "sum")
counttM <- aggregate(countt$Freq,by=list(countt$Month), "sum")
counttM
CounttM[c(11,1,2,3,4,5,6,7,8,9,10),]
counttM[c(11,1,2,3,4,5,6,7,8,9,10),]
names(counttM)[names(counttM)=="11"] <- "1"
counttM
Month <- format(as.Date(countt$date, "%d/%m/%Y"), "%Y-%m")
Month
countt <- cbind(countt, Month)
plot(x = countt$Month, y = countt$Freq, col = "pink", main = "Pwetty Pink Graph")
plot(x = countt$Month, y = countt$Freq, col = "pink", main = "Pwetty Pink Graph")
counttM <- aggregate(countt$Freq,by=list(countt$Month), "sum")
counttM
Month <- format(as.Date(countt$date, "%d/%m/%Y"), "%Y-%m")
countt <- cbind(countt, Month)
countt
countt <- as.data.frame(table(unique(newt)$dd)) # wow this does what I've been looking for for a while!!!
colnames(countt)
names(coun1tt)[names(countt)=="Var1"] <- "date"
names(countt)[names(countt)=="Var1"] <- "date"
Month <- format(as.Date(countt$date, "%d/%m/%Y"), "%Y-%m")
countt <- cbind(countt, Month)
countt
Month <- format(as.Date(countt$date, "%d/%m/%Y"), "%Y-%m")
Month
countt$date
colnames(newt)
split(newt, as.Date(newt$dd, format="%m/%d/%Y"))
countt <- as.data.frame(table(unique(newt)$dd)) # wow this does what I've been looking for for a while!!!
colnames(countt)
names(countt)[names(countt)=="Var1"] <- "date"
countt
length(countt$date)
countt$date <- as.Date(countt$date)
countt$date
Month <- format(as.Date(countt$date, "%d/%m/%Y"), "%Y-%m")
Month
countt2 <- cbind(countt, Month)
countt2
plot(x = countt$Month, y = countt$Freq, col = "pink", main = "Pwetty Pink Graph")
plot(x = countt2$Month, y = countt2$Freq, col = "pink", main = "Pwetty Pink Graph")
counttM <- aggregate(countt2$Freq,by=list(countt2$Month), "sum")
counttM
names(counttM)[names(counttM)=="x"] <- "Calls"
names(counttM)[names(counttM)=="Group.1"] <- "Month"
CounttM
counttM
plot(x = counttM$Month, y = counttM$Calls)
plot(x = counttM$Month, y = counttM$Calls, type="o", col="blue")
plot(x = counttM$Month, y = counttM$Calls, type="o", col="blue")
plot(x = counttM$Month, y = counttM$Calls, type="o")
counttM <- aggregate(countt2$Freq,by=list(countt2$Month))
counttM <- aggregate(countt2$Freq,by=list(countt2$Month), "mean")
counttM <- aggregate(countt2$Freq,by=list(countt2$Month), "sum")
counttav <- aggregate(countt2$Freq,by=list(countt2$Month), "mean")
counttav
countt3 <- cbind(countt2, counttav)
countt2
counttav <- aggregate(countt2$Freq,by=list(countt2$Month), "mean")
counttav
counttav <- mean(countt2$Freq,by=list(countt2$Month))
counttav
counttav <- ave(countt2$Freq,countt2$Month)
counttav
countt3 <- cbind(countt2, counttav)
countt3
plot(x = countt3$Month, y = countt3$Freq, col = "pink", main = "Pwetty Pink Graph")
counttM
plot(x = counttM$Month, y = counttM$Calls, type="o")
counttM <- aggregate(countt2$Freq,by=list(countt2$Month), "sum")
counttM
names(counttM)[names(counttM)=="x"] <- "Calls"
names(counttM)[names(counttM)=="Group.1"] <- "Month"
counttM
plot(x = counttM$Month, y = counttM$Calls, type="o")
write.csv(file="HW7.csv", x=countt3, row.names = F)
write.csv(file="MyData7.csv", x=countt3, row.names = F)
