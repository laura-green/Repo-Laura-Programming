help
print ("Hello world!")
q()
source('C:/Users/Laura/OneDrive/Sérieux/Academic and Pro/Academia/Sciences Po/Master/R/hello.R')
source('C:/Users/Laura/OneDrive/Sérieux/Academic and Pro/Academia/Sciences Po/Master/R/hello.R')
source('C:/Users/Laura/OneDrive/Sérieux/Academic and Pro/Academia/Sciences Po/Master/R/hello.R')
source('C:/Users/Laura/OneDrive/Sérieux/Academic and Pro/Academia/Sciences Po/Master/R/hello.R')
#It prints "Hello world!"
print ("Hello world!", quote=FALSE)
}
}
w <- 100
p <- 0.3
T <- 10
while(T > 0){
x <- runif(1)
sprintf("You started with %s.", w)
if (x > p){
w <- w - 1
print("you lose")
} else {
w <- w + 1
print("you win")
}
# Comment...
print(sprintf("Now you've got %s.", w))
T <- T - 1
}
source('~/GitHub/Session 2 RStudio.R')
x <- c(1, 2, 3)
x
matrix <- matrix(c(x,x))
matrix
matrix <- matrix(c(x,x), nrow=2)
matrix
matrix <- matrix(c(x,x), nrow=2)
matrix
x[3]
View(matrix)
matrix[2, 2]
source('~/GitHub/Session 2 RStudio.R')
install.packages("igraph", repos = 'http://cran.us.r-project.org')
A <- matrix(c(0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,1), nrow = 4)
A
A
A
A <- matrix(c(0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0), nrow = 4)
a1 <- c(0,1,1,1)
a2 <- c(1,0,0,0)
A <- cbind(a1, a2, a2, a2)
A
A <- matrix(c(0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0), nrow = 4)
A
n <- 4
A <- matrix(0, nrow=n, ncol=n)
for(i in 1:n){
for(j in 1:n){
if(i != j){
if(i == 1 | j == 1){
A[i, j] <- 1
}
}
}
}
# 3rd way to create a matrix
n <- 4
A <- matrix(0, nrow=n, ncol=n)
for(i in 1:n){
for(j in 1:n){
if(i != j){
if(i == 1 | j == 1){
A[i, j] <- 1
}
}
}
}
A
# Vectorize (i.e. make these loops into a compact vector)
# Combine 2 if statements
for(i in 1:n){
if(i != j & (i == 1 | j == 1)){
A[i, j] <- 1
}
}
A
require(igraph)
plot(graph_from_adjacency_matrix(A))
for(i in 1:n){
for(i in 1:n){
if(i != j){
if(runif(1) <= p){
A[i, j] <- 1
}
}
}
}
A
A[i, j] <- 1
# Random graph
# Bernoulli (p) -> prob that there is an edge between 2 nodes for n nodes
n <- 4
p <- 0.5
A <- matrix(0, nrow=n, ncol=n)
for(i in 1:n){
if(i != j & (i == 1 | j == 1)){
A[i, j] <- 1
}
}
A
plot(graph_from_adjacency_matrix(A))
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
for(i in 1:n){
for(j in 1:i){
if(i != j){
if(runif(1) <= p){
A[i, j] <- 1
}
}
}
}
A
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
for(i in 1:n){
for(j in 1:i){
if(i != j){
if(runif(1) <= p){
A[i, j] <- 1
}
}
}
}
A <-  + t(A)
A
for(i in 1:n){
for(j in 1:(i-1){
printc((i,j))
if(i != j){
if(runif(1) <= p){
A[i, j] <- 1
for(i in 1:n){
for(j in 1:(i-1){
print(c(i,j))
if(i != j){
if(runif(1) <= p){
A[i, j] <- 1
}
}
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
for(i in 1:n){
for(j in 1:(i-1){
print(c(i,j))
if(i != j){
if(runif(1) <= p){
A[i, j] <- 1
}
}
}
A <- A + t(A)
A
for(i in 1:n){
for(j in 1:(i-1){
print(c(i,j))
if(i != j){
if(runif(1) <= p){
A[i, j] <- 1
}
}
}
# Trying something else
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
for(i in 1:n){
for(j in 1:(i-1)){
print(c(i,j))
if(i != j){
if(runif(1) <= p){
A[i, j] <- 1
}
}
}
A <- A + t(A)
# Trying something else
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
for(i in 1:n){
for(j in 1:(i-1)){
print(c(i,j))
if(i != j){
if(runif(1) <= p){
A[i, j] <- 1
}
}
}
A <- A + t(A)
A
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
for(i in 2:n){
for(j in 1:(i-1)){
print(c(i,j))
if(i != j){
if(runif(1) <= p){
A[i, j] <- 1
}
}
}
A <- A + t(A)
A
plot(graph_from_adjacency_matrix(A))
p <- 1.0
i <- 4
for(j in 1:(i-1)){
if(runif(1) <= p){
A[i, j] <- 1
}
}
p <- 1.0
i <- 4
for(j in 1:(i-1)){
if(runif(1) <= p){
A[i, j] <- 1
}
}
A
t(A)
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
p <- 1.0
i <- 4
for(j in 1:(i-1)){
if(runif(1) <= p){
A[i, j] <- 1
}
}
A
t(A)
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
p <- 1.0
i <- 4
for(j in 1:(i-1)){
if(runif(1) <= p){
A[i, j] <- 1
}
}
A
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
p <- 1.0
i <- 4
for(j in 1:(i-1)){
if(runif(1) <= p){
A[i, j] <- 1
}
}
A
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
p <- 1.0
i <- 4
for(j in 1:(i-1)){
if(runif(1) <= p){
A[i, j] <- 1
}
}
A
as.integer(runif(i-1))
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
p <- 1.0
i <- 4
for(j in 1:(i-1)){
if(runif(1) <= p){
A[i, j] <- 1
}
}
A
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
for(i in 2:n){
for(j in 1:(i-1)){
print(c(i,j))
if(i != j){
if(runif(1) <= p){
A[i, j] <- 1
}
}
}
}
A <- A + t(A)
A
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
for(i in 2:n){
A[i, 1:(i-1)] <- as.integer(runif(i-1)) <= p
}
A <- A + t(A)
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
for(i in 2:n){
A[i, 1:(i-1)] <- as.integer(runif(i-1)) <= p
}
A <- A + t(A)
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
for(i in 2:n){
A[i, 1:(i-1)] <- as.integer(runif(i-1)) <= p
}
A <- A + t(A)
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
for(i in 2:n){
A[i, 1:(i-1)] <- as.integer(runif(i-1)) <= p
}
A <- A + t(A)
?sample
# Sample
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
# ?sample
sample(c(0,1), size=as.integer(n*(n-1)/2), replace=T, prob=c(1-p, p))
sample(c(0, 1),size=as.integer(n*(n-1)/2), replace=T, prob=c(1-p, p))
sample(c(0, 1),size=as.integer(n*(n-1)/2), replace = TRUE, prob=c(1-p, p))
A[lower.tri(A)] <- sample(c(0, 1),size=as.integer(n*(n-1)/2),
replace = TRUE, prob=c(1-p, p))
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
# ?sample
# sample(c(0, 1),size=as.integer(n*(n-1)/2), replace = TRUE, prob=c(1-p, p))
A[lower.tri(A)] <- sample(c(0, 1),size=as.integer(n*(n-1)/2),
replace = TRUE, prob=c(1-p, p))
n <- 4
p <- 1.0
A <- matrix(0, nrow=n, ncol=n)
# ?sample
# sample(c(0, 1),size=as.integer(n*(n-1)/2), replace = TRUE, prob=c(1-p, p))
A[lower.tri(A)] <- sample(c(0, 1),size=as.integer(n*(n-1)/2),
replace = TRUE, prob=c(1-p, p))
A[lower.tri(A)]
read.csv(C:\Users\Laura\Documents\GitHub\RepoLauraProgramming\Session7\Data\output)
getwd
getwd()
setwd(dir = '~/GitHub/RepoLauraProgramming/Session7')
my_data <- read.csv(MyData7.csv)
my_data <- read.csv('MyData7.csv', header = TRUE, sep = ",", quote = "\"", dec = ".", fill = TRUE, comment.char = "")
my_data
